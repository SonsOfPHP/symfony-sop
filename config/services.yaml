# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    _instanceof:
        # These allow you to use the CQRS/Event Sourcing Components.
        # https://docs.sonsofphp.com
        SonsOfPHP\Component\Cqrs\Command\CommandMessageHandlerInterface:
            tags:
                - { name: messenger.message_handler, bus: command.bus }
        SonsOfPHP\Component\Cqrs\Query\QueryMessageHandlerInterface:
            tags:
                - { name: messenger.message_handler, bus: query.bus }
        SonsOfPHP\Component\EventSourcing\Message\MessageHandlerInterface:
            tags:
                - { name: messenger.message_handler, bus: event.bus }

    # Uncomment this if you are using bootstrap and the notifier component for
    # flash messages
    #notifier.flash_message_importance_mapper:
    #    class: Symfony\Component\Notifier\FlashMessage\BootstrapFlashMessageImportanceMapper

    Shared\:
        resource: '../src/Shared'
        exclude:
            # You can keep the Symfony structure for you project or use more of
            # a "Application", "Domain", "Infrastructure" layout. This is all up
            # to you to figure out what you want
            #- '../src/Shared/DependencyInjection/'
            #- '../src/Shared/Entity/'
            - '../src/Shared/Entity/'
            - '../src/Shared/DependencyInjection/'

    # Inject the different Message Buses into your services to make it
    # east to dispatch/handle commands, queries, and events
    # https://docs.sonsofphp.com
    SonsOfPHP\Bridge\Symfony\Cqrs\CommandMessageBus:
        arguments: ['@command.bus']
    SonsOfPHP\Bridge\Symfony\Cqrs\QueryMessageBus:
        arguments: ['@query.bus']
    SonsOfPHP\Bridge\Symfony\EventSourcing\EventMessageBus:
        arguments: ['@event.bus']

    # Makes sure that messages are serialized correctly
    # https://docs.sonsofphp.com
    SonsOfPHP\Bridge\Symfony\EventSourcing\Aggregate\AggregateIdNormalizer:
        tags: [ serializer.normalizer ]
    SonsOfPHP\Bridge\Symfony\EventSourcing\Aggregate\AggregateVersionNormalizer:
        tags: [ serializer.normalizer ]
    SonsOfPHP\Bridge\Symfony\EventSourcing\Message\MessageNormalizer:
        tags: [ serializer.normalizer ]
    SonsOfPHP\Bridge\Symfony\EventSourcing\UuidEventIdMessageEnricherHandler: ~
    SonsOfPHP\Bridge\Symfony\EventSourcing\HttpRequestMessageEnricherHandler:
        arguments: ['@Symfony\Component\HttpFoundation\RequestStack']
    SonsOfPHP\Component\EventSourcing\Message\Enricher\Provider\MessageEnricherProviderInterface:
        class: 'SonsOfPHP\Component\EventSourcing\Message\Enricher\Provider\AllMessageEnricherProvider'
        calls:
            - register: ['@SonsOfPHP\Bridge\Symfony\EventSourcing\HttpRequestMessageEnricherHandler']
            #- register: ['@Shared\Message\Enricher\BlameableEnricher']
            - register: ['@SonsOfPHP\Bridge\Symfony\EventSourcing\UuidEventIdMessageEnricherHandler']

    SonsOfPHP\Component\EventSourcing\Message\Enricher\MessageEnricherInterface:
        class: 'SonsOfPHP\Component\EventSourcing\Message\Enricher\MessageEnricher'
        arguments: ['@SonsOfPHP\Component\EventSourcing\Message\Enricher\Provider\MessageEnricherProviderInterface']


    # Uncomment to enable commands to generate/inspect UUIDs and ULIDs
    #Symfony\Component\Uid\Command\GenerateUlidCommand: ~
    #Symfony\Component\Uid\Command\InspectUlidCommand: ~
    #Symfony\Component\Uid\Command\GenerateUuidCommand: ~
    #Symfony\Component\Uid\Command\InspectUuidCommand: ~
